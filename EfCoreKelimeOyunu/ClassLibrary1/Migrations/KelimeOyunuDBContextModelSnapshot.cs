// <auto-generated />
using System;
using Entity.KelimeOyunu;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entity.KelimeOyunu.Migrations
{
    [DbContext(typeof(KelimeOyunuDBContext))]
    partial class KelimeOyunuDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.KelimeOyunu.EightWord", b =>
                {
                    b.Property<int>("EightWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EightWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EightWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EightWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EightWordScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EightWordID");

                    b.ToTable("EightWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.FifthWord", b =>
                {
                    b.Property<int>("FifthWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FifthWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FifthWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FifthWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FifthWordScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FifthWordID");

                    b.ToTable("FifthWords");

                    b.HasData(
                        new
                        {
                            FifthWordID = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("be57ee83-d701-4be2-8b42-f8c97bd8aa72"),
                            FifthWordAnswer = "Kobay",
                            FifthWordData = "Kobay",
                            FifthWordQuestion = "Bir deneyin edilgen katılımcısı",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("c460c04a-dbd6-46cc-a3e0-c9949276dc75"),
                            FifthWordAnswer = "Damar",
                            FifthWordData = "Damar",
                            FifthWordQuestion = "Argoda, “Hüznü ruha zerk eden şarkılar” için kullanılan bir söz",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("ed84c805-0e8d-4e9b-9cc4-98094e10b220"),
                            FifthWordAnswer = "Kadın",
                            FifthWordData = "Kadın",
                            FifthWordQuestion = "Eşeysel yaratılış özelliğinde letafet barındıran insan, cinsilatif",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("2ac02d17-aeff-4073-bd3e-94d77e21f576"),
                            FifthWordAnswer = "Canım",
                            FifthWordData = "Canım",
                            FifthWordQuestion = "Yürekten gelen, sahiplenen, en sade sevgi sözü",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("251871f2-f08c-452d-9fc0-7bbb75ea17d4"),
                            FifthWordAnswer = "Hatmi",
                            FifthWordData = "Hatmi",
                            FifthWordQuestion = "Mora çalan pembe, bordo çiçekler açan şifalı bir bitki",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("b27ad585-f19e-46df-85e7-bce2e51c3324"),
                            FifthWordAnswer = "Kıraç",
                            FifthWordData = "Kıraç",
                            FifthWordQuestion = "“İşlenmemiş verimsiz araziler ve topraklar” için kullanılan bir söz",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("117cb706-ebea-487b-9589-ca4cbf5b7200"),
                            FifthWordAnswer = "Bücür",
                            FifthWordData = "Bücür",
                            FifthWordQuestion = "Sempatik bodur",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("21604afe-bf57-419e-85d8-d52587ec39e8"),
                            FifthWordAnswer = "Pilav",
                            FifthWordData = "Pilav",
                            FifthWordQuestion = "Eski mezun toplantılarının vazgeçilmez yemeği",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("891d4bbb-0991-4516-8ee9-afec99e95429"),
                            FifthWordAnswer = "Cephe",
                            FifthWordData = "Cephe",
                            FifthWordQuestion = "Üzerinde savaşın sürdüğü bölge",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("73a3c657-ec1c-480e-a52a-1b99f22b1bdc"),
                            FifthWordAnswer = "Sumak",
                            FifthWordData = "Sumak",
                            FifthWordQuestion = "Özellikle kokuyu azalttığı için soğan salatalarında tercih edilen bir baharat",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("eaa76430-1f4f-425d-bc35-4133bb67a436"),
                            FifthWordAnswer = "Ilgın",
                            FifthWordData = "Ilgın",
                            FifthWordQuestion = "Akdeniz’e özgü, Deniz kıyısında bile yetişebilen bir ağaç",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("34274cf2-cf5a-4e83-8f02-4147ca2a50dc"),
                            FifthWordAnswer = "Litre",
                            FifthWordData = "Litre",
                            FifthWordQuestion = "Bir desimetreküp hacmindeki ölçü birimi",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("345d1a22-e95b-4c6e-91a1-cadc9393fa90"),
                            FifthWordAnswer = "Lopet",
                            FifthWordData = "Lopet",
                            FifthWordQuestion = "Kasaplık hayvanlardan sağlanan kemiksiz besin maddesi",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("70eb0cfc-c037-4eab-bed8-504600631b68"),
                            FifthWordAnswer = "Nadir",
                            FifthWordData = "Nadir",
                            FifthWordQuestion = "“Seyrek” sözünün eş ve yakın anlamlı karşılığı",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("82a66b88-b759-47f1-bb76-4b95480ea8ef"),
                            FifthWordAnswer = "Jumbo",
                            FifthWordData = "Jumbo",
                            FifthWordQuestion = "80X110 ölçülerindeki çöp poşetinin ebatı” için kullanılan söz",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("89583221-06be-4a99-a56f-e28ec1595501"),
                            FifthWordAnswer = "Lokum",
                            FifthWordData = "Lokum",
                            FifthWordQuestion = "Kauçuk ve jelatin kıvamındaki bir dinamit formuna da adını veren tatlıs",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("79f707b7-bed5-4ac0-add7-e9e5e7f97d2a"),
                            FifthWordAnswer = "Patak",
                            FifthWordData = "Patak",
                            FifthWordQuestion = "“Dayak, kötek” anlamlarında bir sözcük",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("8c780204-e4e9-4a98-8e68-c240c210f797"),
                            FifthWordAnswer = "Rakam",
                            FifthWordData = "Rakam",
                            FifthWordQuestion = "Sayıları göstermek için kullanılan işaretlerden her biri",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("f7cdd547-9e97-43a7-9a20-28ffa3935b02"),
                            FifthWordAnswer = "Hülya",
                            FifthWordData = "Hülya",
                            FifthWordQuestion = "Tatlı düş",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("7eb8683e-c955-4714-9d57-6e33362a62f3"),
                            FifthWordAnswer = "Islık",
                            FifthWordData = "Islık",
                            FifthWordQuestion = "Dil dudak yoluyla çıkarılan tiz ses",
                            FifthWordScore = 500
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.FourWord", b =>
                {
                    b.Property<int>("FourWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FourWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FourWordScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FourWordID");

                    b.ToTable("FourWords");

                    b.HasData(
                        new
                        {
                            FourWordID = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("32f3ad43-3576-496c-9497-8687f1a0a17c"),
                            FourWordAnswer = "Çare",
                            FourWordData = "Çare",
                            FourWordQuestion = "Umar sözünün daha yaygın kullanılan Farsça kökenli eş anlamlısı ",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("4c2cc2c4-823e-471a-ae2d-4aa8b016cf43"),
                            FourWordAnswer = "Vida",
                            FourWordData = "Vida",
                            FourWordQuestion = "Etrafı helis eğrisi biçiminde girintiler ve çıkıntılarla dolanmış çivi ",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("89baad40-aee9-42cc-9e46-a6f257db3c7f"),
                            FourWordAnswer = "Ters",
                            FourWordData = "Ters",
                            FourWordQuestion = "Mecazen , 'Gönül ve cesaret kırıcı,huysuz,sert' ",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("c5d7dd7e-1f26-4981-9d1f-1e9b07431f8d"),
                            FourWordAnswer = "Uyuz",
                            FourWordData = "Uyuz",
                            FourWordQuestion = "Neden olduğu rahatsız edici kaşıntı nedeniyle “Sevimsiz insanlara” da yakıştırılan bir deri hastalığı",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("b764da12-4886-45cf-969e-49609822cbce"),
                            FourWordAnswer = "Tepe",
                            FourWordData = "Tepe",
                            FourWordQuestion = "Yüksekliği 0-500 M. arasında değişen, doğal coğrafi oluşum",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("89b3a2c1-50f7-42b3-acac-ab8a117e0dcc"),
                            FourWordAnswer = "Vamp",
                            FourWordData = "Vamp",
                            FourWordQuestion = "“Şuh” sözcüğünün Batı kökenli eş ve yakın anlamlı karşılığı",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("6fe217c0-ca2b-4403-b42f-041a139ffb45"),
                            FourWordAnswer = "Aras",
                            FourWordData = "Aras",
                            FourWordQuestion = "Türkiye’nin Doğu Anadolu Bölgesi’nde doğup Hazar Denizi’ne dökülen Nehir",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("174fab17-5c3e-4379-aa85-099a9c043467"),
                            FourWordAnswer = "Kask",
                            FourWordData = "Kask",
                            FourWordQuestion = "Modern miğfer",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("0fdc7178-c650-42f7-87ae-cb4e9144a63e"),
                            FourWordAnswer = "İlik",
                            FourWordData = "İlik",
                            FourWordQuestion = "Etrafı iplikle örülen düğme yarığı",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("388f0c55-7c40-46ee-90f3-c93262b39a69"),
                            FourWordAnswer = "Lüle",
                            FourWordData = "Lüle",
                            FourWordQuestion = "Soru: Nargilenin ucuna takılan, tütün konulan tuva",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("e25c1451-6634-41d7-a950-447ecb89f645"),
                            FourWordAnswer = "Gece",
                            FourWordData = "Gece",
                            FourWordQuestion = "Nokturnal canlıların aktif olduğu zaman dilimi",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("90dac74c-0958-42c3-87f5-4d674f659cb6"),
                            FourWordAnswer = "Maaş",
                            FourWordData = "Maaş",
                            FourWordQuestion = "Soru: Aylıkçı nimeti",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("8f12eb3d-2a89-49f4-a30c-492d9ac8f389"),
                            FourWordAnswer = "File",
                            FourWordData = "File",
                            FourWordQuestion = "Çarşı pazar ekonomisinin simgelerinden olan ve artık yeniden popülerleşen ağ torba",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("f16a7b1b-6a33-4eca-8af3-ae566d6797bf"),
                            FourWordAnswer = "İnek",
                            FourWordData = "İnek",
                            FourWordQuestion = "Genç olanlarına “Düve” denen hayvan",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("54f10095-94d4-4a04-a840-e4793ff1cbd6"),
                            FourWordAnswer = "Eğik",
                            FourWordData = "Eğik",
                            FourWordQuestion = "Dik veya paralel olmayan doğru",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("4f78386d-c36c-4921-afac-a4e8180baee8"),
                            FourWordAnswer = "Filo",
                            FourWordData = "Filo",
                            FourWordQuestion = "Emir komuta zinciri ile bağlı olan taşıtlar topluluğu",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("60c2bdce-9e38-4625-a8fd-d11f53120d8d"),
                            FourWordAnswer = "Cart",
                            FourWordData = "Cart",
                            FourWordQuestion = "“Hoşa gitmeyen, olumsuz yönde dikkat çeken renkleri” niteleyen bir söz",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("006a0ba4-ffef-4074-a748-2490547559e3"),
                            FourWordAnswer = "Ataş",
                            FourWordData = "Ataş",
                            FourWordQuestion = "İnce bir teli üç kez iç içe bükerek elde edilen bir kırtasiye gereci",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("79b4e674-2f85-4958-a143-34cd4ac51b98"),
                            FourWordAnswer = "Edip",
                            FourWordData = "Edip",
                            FourWordQuestion = "Bir erkek adı olarak da kullanılan, “Edebi eser veren kimse, yazar” anlamındaki isim",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("35b0ed5c-e089-43a5-ba8e-84f06cdc0a34"),
                            FourWordAnswer = "Vaiz",
                            FourWordData = "Vaiz",
                            FourWordQuestion = "İşi ve inancı gereği öğüt veren kişi",
                            FourWordScore = 400
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.NineWord", b =>
                {
                    b.Property<int>("NineWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NineWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NineWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NineWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NineWordScore")
                        .HasColumnType("int");

                    b.HasKey("NineWordID");

                    b.ToTable("NineWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.ScoreTable", b =>
                {
                    b.Property<int>("ScoreTableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScoreData")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ScoreTableID");

                    b.HasIndex("UserID");

                    b.ToTable("ScoreTables");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.SevenWord", b =>
                {
                    b.Property<int>("SevenWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SevenWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SevenWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SevenWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SevenWordScore")
                        .HasColumnType("int");

                    b.HasKey("SevenWordID");

                    b.ToTable("SevenWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.SixthWord", b =>
                {
                    b.Property<int>("SixthWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SixthWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SixthWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SixthWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SixthWordScore")
                        .HasColumnType("int");

                    b.HasKey("SixthWordID");

                    b.ToTable("SixthWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.TenWord", b =>
                {
                    b.Property<int>("TenWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenWordScore")
                        .HasColumnType("int");

                    b.HasKey("TenWordID");

                    b.ToTable("TenWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("UserIsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("UserIsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserLastScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedDate = new DateTime(2021, 4, 15, 15, 16, 10, 84, DateTimeKind.Local).AddTicks(7008),
                            DataGuidID = new Guid("929be0dd-a550-497d-8afa-9077a5ce3963"),
                            UserEMail = "berk.garip@hbksoftware.com",
                            UserIsActive = true,
                            UserIsEmailConfirmed = true,
                            UserName = "Berk",
                            UserPassword = "berk2222",
                            UserRoleID = 1,
                            UserSurname = "Garip"
                        },
                        new
                        {
                            UserID = 2,
                            CreatedDate = new DateTime(2021, 4, 15, 15, 16, 10, 86, DateTimeKind.Local).AddTicks(8661),
                            DataGuidID = new Guid("875f1358-94b2-4a1b-8f43-8e9716b366b8"),
                            UserEMail = "Kullanici@gmail.com",
                            UserIsActive = true,
                            UserIsEmailConfirmed = true,
                            UserName = "Kullanici",
                            UserPassword = "berk2222",
                            UserRoleID = 2,
                            UserSurname = "Kullanici"
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleID");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("8a5ecc4c-a430-49ff-bf7d-9f33b81d8012"),
                            UserRoleName = "Admin"
                        },
                        new
                        {
                            UserRoleID = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("66aa03db-ecee-4c31-91d1-895247ee35a5"),
                            UserRoleName = "Oyuncu"
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.ScoreTable", b =>
                {
                    b.HasOne("Entity.KelimeOyunu.User", "User")
                        .WithMany("ScoreTables")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.User", b =>
                {
                    b.HasOne("Entity.KelimeOyunu.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.User", b =>
                {
                    b.Navigation("ScoreTables");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
