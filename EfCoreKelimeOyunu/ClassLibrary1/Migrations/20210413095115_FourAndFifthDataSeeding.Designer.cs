// <auto-generated />
using System;
using Entity.KelimeOyunu;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entity.KelimeOyunu.Migrations
{
    [DbContext(typeof(KelimeOyunuDBContext))]
    [Migration("20210413095115_FourAndFifthDataSeeding")]
    partial class FourAndFifthDataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.KelimeOyunu.EightWord", b =>
                {
                    b.Property<int>("EightWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EightWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EightWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EightWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EightWordScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EightWordID");

                    b.ToTable("EightWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.FifthWord", b =>
                {
                    b.Property<int>("FifthWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FifthWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FifthWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FifthWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FifthWordScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FifthWordID");

                    b.ToTable("FifthWords");

                    b.HasData(
                        new
                        {
                            FifthWordID = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("0d10a884-5ca9-406e-ae84-3b838d851222"),
                            FifthWordAnswer = "Kobay",
                            FifthWordData = "Kobay",
                            FifthWordQuestion = "Bir deneyin edilgen katılımcısı",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("704ea285-c0ca-438d-9874-ce1385c149f4"),
                            FifthWordAnswer = "Damar",
                            FifthWordData = "Damar",
                            FifthWordQuestion = "Argoda, “Hüznü ruha zerk eden şarkılar” için kullanılan bir söz",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("f51c59c0-dd23-479f-a5c0-a33e0e640ecc"),
                            FifthWordAnswer = "Kadın",
                            FifthWordData = "Kadın",
                            FifthWordQuestion = "Eşeysel yaratılış özelliğinde letafet barındıran insan, cinsilatif",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("c6a3f239-517c-4cab-a255-ac579dfe7f2c"),
                            FifthWordAnswer = "Canım",
                            FifthWordData = "Canım",
                            FifthWordQuestion = "Yürekten gelen, sahiplenen, en sade sevgi sözü",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("5fc5e8ab-f7e5-406f-91af-ca1222f822e7"),
                            FifthWordAnswer = "Hatmi",
                            FifthWordData = "Hatmi",
                            FifthWordQuestion = "Mora çalan pembe, bordo çiçekler açan şifalı bir bitki",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("6d25d85c-eb6e-46c1-b5d1-7a2b7706bc92"),
                            FifthWordAnswer = "Kıraç",
                            FifthWordData = "Kıraç",
                            FifthWordQuestion = "“İşlenmemiş verimsiz araziler ve topraklar” için kullanılan bir söz",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("87f53b71-acac-40ae-9846-6d0f4d18d1d0"),
                            FifthWordAnswer = "Bücür",
                            FifthWordData = "Bücür",
                            FifthWordQuestion = "Sempatik bodur",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("7817f7d3-1083-49d9-b6cb-1941af0f26d6"),
                            FifthWordAnswer = "Pilav",
                            FifthWordData = "Pilav",
                            FifthWordQuestion = "Eski mezun toplantılarının vazgeçilmez yemeği",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("976d4051-5cab-4c9f-9bb8-5668f5136b94"),
                            FifthWordAnswer = "Cephe",
                            FifthWordData = "Cephe",
                            FifthWordQuestion = "Üzerinde savaşın sürdüğü bölge",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("db3c0e17-9d60-47f5-9f5b-87813bbacc50"),
                            FifthWordAnswer = "Sumak",
                            FifthWordData = "Sumak",
                            FifthWordQuestion = "Özellikle kokuyu azalttığı için soğan salatalarında tercih edilen bir baharat",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("1a0015c1-5e93-4551-9cbb-e9fd073802ea"),
                            FifthWordAnswer = "Ilgın",
                            FifthWordData = "Ilgın",
                            FifthWordQuestion = "Akdeniz’e özgü, Deniz kıyısında bile yetişebilen bir ağaç",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("d5a93d26-1574-4167-aea1-0fd6260531f7"),
                            FifthWordAnswer = "Litre",
                            FifthWordData = "Litre",
                            FifthWordQuestion = "Bir desimetreküp hacmindeki ölçü birimi",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("bce18124-14b9-4de5-9a89-6e20bdf50d79"),
                            FifthWordAnswer = "Lopet",
                            FifthWordData = "Lopet",
                            FifthWordQuestion = "Kasaplık hayvanlardan sağlanan kemiksiz besin maddesi",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("4f4a3749-3294-40e6-95fb-61dc6496955b"),
                            FifthWordAnswer = "Nadir",
                            FifthWordData = "Nadir",
                            FifthWordQuestion = "“Seyrek” sözünün eş ve yakın anlamlı karşılığı",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("fcf57835-858b-4911-b18a-044b0ac0a919"),
                            FifthWordAnswer = "Jumbo",
                            FifthWordData = "Jumbo",
                            FifthWordQuestion = "80X110 ölçülerindeki çöp poşetinin ebatı” için kullanılan söz",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("eef6c7e5-8fce-43cd-8e96-cfe057531203"),
                            FifthWordAnswer = "Lokum",
                            FifthWordData = "Lokum",
                            FifthWordQuestion = "Kauçuk ve jelatin kıvamındaki bir dinamit formuna da adını veren tatlıs",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("bad2b86c-3d0a-4ca4-ae9a-da5e0c5f7c9e"),
                            FifthWordAnswer = "Patak",
                            FifthWordData = "Patak",
                            FifthWordQuestion = "“Dayak, kötek” anlamlarında bir sözcük",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("e34a57f2-c109-406b-9357-3cabf8d93825"),
                            FifthWordAnswer = "Rakam",
                            FifthWordData = "Rakam",
                            FifthWordQuestion = "Sayıları göstermek için kullanılan işaretlerden her biri",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("a1d96912-a0c3-434c-9872-72c9611e0fc2"),
                            FifthWordAnswer = "Hülya",
                            FifthWordData = "Hülya",
                            FifthWordQuestion = "Tatlı düş",
                            FifthWordScore = 500
                        },
                        new
                        {
                            FifthWordID = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("4134c643-51ec-469d-8fea-375cbb642dec"),
                            FifthWordAnswer = "Islık",
                            FifthWordData = "Islık",
                            FifthWordQuestion = "Dil dudak yoluyla çıkarılan tiz ses",
                            FifthWordScore = 500
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.FourWord", b =>
                {
                    b.Property<int>("FourWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FourWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FourWordScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FourWordID");

                    b.ToTable("FourWords");

                    b.HasData(
                        new
                        {
                            FourWordID = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("eb00868d-de76-48f6-91b8-d1b0bc44415c"),
                            FourWordAnswer = "Çare",
                            FourWordData = "Çare",
                            FourWordQuestion = "Umar sözünün daha yaygın kullanılan Farsça kökenli eş anlamlısı ",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("d9bb46d2-1dc8-44a7-935d-b3d3594cb8e4"),
                            FourWordAnswer = "Vida",
                            FourWordData = "Vida",
                            FourWordQuestion = "Etrafı helis eğrisi biçiminde girintiler ve çıkıntılarla dolanmış çivi ",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("32d76761-1d39-46d9-a89a-5001414510e4"),
                            FourWordAnswer = "Ters",
                            FourWordData = "Ters",
                            FourWordQuestion = "Mecazen , 'Gönül ve cesaret kırıcı,huysuz,sert' ",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("229e19c4-4f1a-4d2b-8c47-d20a07918ce2"),
                            FourWordAnswer = "Uyuz",
                            FourWordData = "Uyuz",
                            FourWordQuestion = "Neden olduğu rahatsız edici kaşıntı nedeniyle “Sevimsiz insanlara” da yakıştırılan bir deri hastalığı",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("00f16338-d3bd-43b3-8f16-a582fceda721"),
                            FourWordAnswer = "Tepe",
                            FourWordData = "Tepe",
                            FourWordQuestion = "Yüksekliği 0-500 M. arasında değişen, doğal coğrafi oluşum",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("aa492e04-7034-4c86-87a6-62a02f94d76f"),
                            FourWordAnswer = "Vamp",
                            FourWordData = "Vamp",
                            FourWordQuestion = "“Şuh” sözcüğünün Batı kökenli eş ve yakın anlamlı karşılığı",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("4b3ce5ae-9acc-46f7-abb2-fcd1b3c362fe"),
                            FourWordAnswer = "Aras",
                            FourWordData = "Aras",
                            FourWordQuestion = "Türkiye’nin Doğu Anadolu Bölgesi’nde doğup Hazar Denizi’ne dökülen Nehir",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("a6ae2e21-6966-4d5e-b867-f725ffc77e44"),
                            FourWordAnswer = "Kask",
                            FourWordData = "Kask",
                            FourWordQuestion = "Modern miğfer",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("ca0b1d40-db09-486b-a778-1760340371cf"),
                            FourWordAnswer = "İlik",
                            FourWordData = "İlik",
                            FourWordQuestion = "Etrafı iplikle örülen düğme yarığı",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("df9133d4-c768-4d0f-88e2-b5645be11044"),
                            FourWordAnswer = "Lüle",
                            FourWordData = "Lüle",
                            FourWordQuestion = "Soru: Nargilenin ucuna takılan, tütün konulan tuva",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("f365c931-1faf-4f8f-ad19-64c857effb98"),
                            FourWordAnswer = "Gece",
                            FourWordData = "Gece",
                            FourWordQuestion = "Nokturnal canlıların aktif olduğu zaman dilimi",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("d158a66d-a690-4153-87e4-5c042c64a791"),
                            FourWordAnswer = "Maaş",
                            FourWordData = "Maaş",
                            FourWordQuestion = "Soru: Aylıkçı nimeti",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("200c5692-fb88-487a-8294-09a4ea96de11"),
                            FourWordAnswer = "File",
                            FourWordData = "File",
                            FourWordQuestion = "Çarşı pazar ekonomisinin simgelerinden olan ve artık yeniden popülerleşen ağ torba",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("55117fa2-6bda-4fc0-a514-20f972fc8eca"),
                            FourWordAnswer = "İnek",
                            FourWordData = "İnek",
                            FourWordQuestion = "Genç olanlarına “Düve” denen hayvan",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("03c55098-9128-46d2-ab37-b7c4b5fea409"),
                            FourWordAnswer = "Eğik",
                            FourWordData = "Eğik",
                            FourWordQuestion = "Dik veya paralel olmayan doğru",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("06afbb50-ea9a-4373-bab5-ab3b7a1febd6"),
                            FourWordAnswer = "Filo",
                            FourWordData = "Filo",
                            FourWordQuestion = "Emir komuta zinciri ile bağlı olan taşıtlar topluluğu",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("9b1a1092-bc7a-44db-b512-42f51605173d"),
                            FourWordAnswer = "Cart",
                            FourWordData = "Cart",
                            FourWordQuestion = "“Hoşa gitmeyen, olumsuz yönde dikkat çeken renkleri” niteleyen bir söz",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("7ca38fe1-a0fb-49d3-85f4-151705fd351a"),
                            FourWordAnswer = "Ataş",
                            FourWordData = "Ataş",
                            FourWordQuestion = "İnce bir teli üç kez iç içe bükerek elde edilen bir kırtasiye gereci",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("c1905aa8-ea6a-4907-9422-18f8393b2f39"),
                            FourWordAnswer = "Edip",
                            FourWordData = "Edip",
                            FourWordQuestion = "Bir erkek adı olarak da kullanılan, “Edebi eser veren kimse, yazar” anlamındaki isim",
                            FourWordScore = 400
                        },
                        new
                        {
                            FourWordID = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("e90712a4-3aac-43c7-86ab-30ec218780af"),
                            FourWordAnswer = "Vaiz",
                            FourWordData = "Vaiz",
                            FourWordQuestion = "İşi ve inancı gereği öğüt veren kişi",
                            FourWordScore = 400
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.NineWord", b =>
                {
                    b.Property<int>("NineWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NineWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NineWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NineWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NineWordScore")
                        .HasColumnType("int");

                    b.HasKey("NineWordID");

                    b.ToTable("NineWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.ScoreTable", b =>
                {
                    b.Property<int>("ScoreTableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScoreData")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ScoreTableID");

                    b.HasIndex("UserID");

                    b.ToTable("ScoreTables");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.SevenWord", b =>
                {
                    b.Property<int>("SevenWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SevenWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SevenWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SevenWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SevenWordScore")
                        .HasColumnType("int");

                    b.HasKey("SevenWordID");

                    b.ToTable("SevenWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.SixthWord", b =>
                {
                    b.Property<int>("SixthWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SixthWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SixthWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SixthWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SixthWordScore")
                        .HasColumnType("int");

                    b.HasKey("SixthWordID");

                    b.ToTable("SixthWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.TenWord", b =>
                {
                    b.Property<int>("TenWordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenWordAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenWordData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenWordQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenWordScore")
                        .HasColumnType("int");

                    b.HasKey("TenWordID");

                    b.ToTable("TenWords");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("UserIsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("UserIsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserLastScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            CreatedDate = new DateTime(2021, 4, 13, 12, 51, 15, 8, DateTimeKind.Local).AddTicks(5150),
                            DataGuidID = new Guid("81c8c8ca-201c-4bc2-aa1f-1396faec4694"),
                            UserEMail = "berk.garip@hbksoftware.com",
                            UserIsActive = true,
                            UserIsEmailConfirmed = true,
                            UserName = "Berk",
                            UserPassword = "berk2222",
                            UserRoleID = 1,
                            UserSurname = "Garip"
                        },
                        new
                        {
                            UserID = 2,
                            CreatedDate = new DateTime(2021, 4, 13, 12, 51, 15, 10, DateTimeKind.Local).AddTicks(6935),
                            DataGuidID = new Guid("632918e6-5abc-4c5c-8266-07fbd9198767"),
                            UserEMail = "Kullanici@gmail.com",
                            UserIsActive = true,
                            UserIsEmailConfirmed = true,
                            UserName = "Kullanici",
                            UserPassword = "berk2222",
                            UserRoleID = 2,
                            UserSurname = "Kullanici"
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataGuidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleID");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleID = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("a2cc96d9-1716-4f5b-af4b-0b5bab21356a"),
                            UserRoleName = "Admin"
                        },
                        new
                        {
                            UserRoleID = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataGuidID = new Guid("bbea0ad4-54c2-4243-89c4-e38ae0c17204"),
                            UserRoleName = "Oyuncu"
                        });
                });

            modelBuilder.Entity("Entity.KelimeOyunu.ScoreTable", b =>
                {
                    b.HasOne("Entity.KelimeOyunu.User", "User")
                        .WithMany("ScoreTables")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.User", b =>
                {
                    b.HasOne("Entity.KelimeOyunu.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.User", b =>
                {
                    b.Navigation("ScoreTables");
                });

            modelBuilder.Entity("Entity.KelimeOyunu.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
